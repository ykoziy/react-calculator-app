{"version":3,"sources":["containers/Header.js","actions/index.js","constants/actionTypes.js","components/Display.js","containers/FormulaDisplay.js","containers/OutputDisplay.js","components/HistoryBody.js","containers/HistoryItem.js","containers/HistoryFooter.js","containers/History.js","constants/calculatorData.js","containers/DigitButton.js","utils/index.js","containers/OperationButton.js","containers/EqualsButton.js","components/Keypad.js","containers/ControlsView.js","components/App.js","serviceWorker.js","index.js","reducers/index.js"],"names":["connect","dispatch","toggleHistoryView","type","className","onClick","OutputScreen","props","children","state","formula","result","output","HistoryBody","selectHistoryItem","obj","expression","previousResult","history","clearHistory","length","listItems","map","i","idx","key","calculatorButtons","id","text","evaluated","pressDigit","pressDecimal","handleDigit","buttonText","userInput","newFormula","concat","match","test","slice","handleDecimal","setState","includes","console","log","buttonType","handleButtonClick","pressClear","pressOperation","handleAC","handleOperation","replace","pressEquals","evaluate","toString","historyItem","handleEquals","ButtonModule","digitButton","operationButton","equalsButton","Keypad","buttons","item","btn","isHistoryView","Fragment","App","Component","CalculatorApp","React","Boolean","window","location","hostname","store","createStore","action","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eaa754b5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport '../assets/css/components/Header.scss';\r\nimport { connect } from 'react-redux';\r\nimport { toggleHistoryView } from '../actions'\r\n\r\nconst Header = ({toggleHistoryView}) => {\r\n    return(\r\n        <div className=\"header\">\r\n            <button className=\"history-button\" onClick={toggleHistoryView}>\r\n              <i className=\"fas fa-history fa-lg\"></i>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\nHeader.propTypes = {\r\n    toggleHistoryView: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    toggleHistoryView: () => dispatch(toggleHistoryView())\r\n});\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(Header);\r\n","import {\r\n  TOGGLE_HISTORY_VIEW, CLEAR_HISTORY,\r\n  SELECT_HISTORY_ITEM, PRESS_EQUALS,\r\n  PRESS_CLEAR, PRESS_DIGIT,\r\n  PRESS_DECIMAL, PRESS_OPERATION\r\n} from \"../constants/actionTypes.js\";\r\n\r\nexport const clearHistory = () => ({type: CLEAR_HISTORY});\r\nexport const pressDigit = (obj) => ({type: PRESS_DIGIT, obj});\r\nexport const pressEquals = (obj) => ({type: PRESS_EQUALS, obj});\r\nexport const pressDecimal = (obj) => ({type: PRESS_DECIMAL, obj});\r\nexport const pressOperation = (obj) => ({type: PRESS_OPERATION, obj});\r\nexport const pressClear = (obj) => ({type: PRESS_CLEAR, obj});\r\nexport const toggleHistoryView = () => ({type: TOGGLE_HISTORY_VIEW});\r\nexport const selectHistoryItem = (obj) => ({type: SELECT_HISTORY_ITEM, obj});\r\n","export const TOGGLE_HISTORY_VIEW = 'TOGGLE_HISTORY_VIEW';\r\nexport const CLEAR_HISTORY = 'CLEAR_HISTORY';\r\nexport const SELECT_HISTORY_ITEM = 'SELECT_HISTORY_ITEM';\r\nexport const PRESS_EQUALS = 'PRESS_EQUALS';\r\nexport const PRESS_CLEAR = 'PRESS_CLEAR';\r\nexport const PRESS_DIGIT = 'PRESS_DIGIT';\r\nexport const PRESS_DECIMAL = 'PRESS_DECIMAL';\r\nexport const PRESS_OPERATION = 'PRESS_OPERATION';\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport '../assets/css/components/Display.scss';\r\n\r\nconst OutputScreen = (props) => {\r\n    return(\r\n        <div className=\"display\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\nOutputScreen.propTypes = {\r\n    children: PropTypes.arrayOf(PropTypes.element).isRequired\r\n};\r\n\r\nexport default OutputScreen;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nconst FormulaDisplay = ({formula}) => {\r\n    return(\r\n        <div className=\"formula\">{formula}</div>\r\n    );\r\n}\r\nFormulaDisplay.propTypes = {\r\n    formula: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    formula: state.formula\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(FormulaDisplay);\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nconst OutputDisplay = ({result}) => {\r\n    let output = result;\r\n    if(result === \"\")\r\n    {\r\n        output = \"0\"\r\n    }\r\n    return(\r\n        <div className=\"output\">{output}</div>\r\n    );\r\n}\r\nOutputDisplay.propTypes = {\r\n    result: PropTypes.any.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    result: state.result\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(OutputDisplay);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst HistoryBody = (props) => {\r\n    return(\r\n        <div className=\"history-body\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\nHistoryBody.propTypes = {\r\n    children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default HistoryBody;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { selectHistoryItem } from '../actions'\r\n\r\nconst HistoryItem = ({expression, result, selectHistoryItem}) => {\r\n    const handleItemClick = () => {\r\n        selectHistoryItem({\r\n            formula: expression,\r\n            previousResult: result,\r\n            result: result,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"history-item\" onClick={handleItemClick}>\r\n            <div className=\"history-item-expression\">\r\n                {expression}\r\n            </div>\r\n            <div className=\"history-item-result\">\r\n                {result}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nHistoryItem.propTypes = {\r\n    expression: PropTypes.string.isRequired,\r\n    result: PropTypes.string.isRequired,\r\n    selectHistoryItem: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    selectHistoryItem: (obj) => dispatch(selectHistoryItem(obj))\r\n});\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(HistoryItem);\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport '../assets/css/components/History/Footer.scss';\r\nimport { clearHistory } from '../actions';\r\n\r\nconst HistoryFooter = ({history, clearHistory}) => {\r\n    return (\r\n        <div className=\"history-footer\">\r\n            {\r\n                (history.length > 0) &&\r\n                <button className=\"history-button\" onClick={clearHistory}>\r\n                    <i className=\"far fa-trash-alt fa-lg\"></i>\r\n                </button>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nHistoryFooter.propTypes = {\r\n    history: PropTypes.array.isRequired,\r\n    clearHistory: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    history: state.history\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  clearHistory: () => dispatch(clearHistory())\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(HistoryFooter);\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport '../assets/css/components/History/Main.scss';\r\nimport HistoryBody from \"../components/HistoryBody\";\r\nimport HistoryItem from \"./HistoryItem\";\r\nimport HistoryFooter from \"./HistoryFooter\";\r\n\r\nconst History = ({history}) => {\r\n    let listItems = <h5>There's no history yet</h5>;\r\n    if(history.length > 0) {\r\n        listItems = history.map((i, idx) => {\r\n            return (\r\n                <HistoryItem\r\n                    key={\"hist-\"+idx}\r\n                    expression={i.expression}\r\n                    result={i.result}\r\n                />\r\n            );\r\n        });\r\n    }\r\n    return(\r\n        <div className=\"history\">\r\n            <HistoryBody>\r\n                {listItems}\r\n            </HistoryBody>\r\n            <HistoryFooter/>\r\n        </div>\r\n    );\r\n}\r\nHistory.propTypes = {\r\n    history: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    history: state.history\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(History);\r\n","export const MAX_DIGITS = 16;\r\n\r\nexport const calculatorButtons = [\r\n    {\r\n        id:\"clear\",\r\n        type:\"clear-all\",\r\n        text:\"AC\"\r\n    },\r\n    {\r\n        id:\"divide\",\r\n        type:\"operation\",\r\n        text:\"/\"\r\n    },\r\n    {\r\n        id:\"multiply\",\r\n        type:\"operation\",\r\n        text:\"*\"\r\n    },\r\n    {\r\n        id:\"seven\",\r\n        type:\"number\",\r\n        text:\"7\"\r\n    },\r\n    {\r\n        id:\"eight\",\r\n        type:\"number\",\r\n        text:\"8\"\r\n    },\r\n    {\r\n        id:\"nine\",\r\n        type:\"number\",\r\n        text:\"9\"\r\n    },\r\n    {\r\n        id:\"four\",\r\n        type:\"number\",\r\n        text:\"4\"\r\n    },\r\n    {\r\n        id:\"five\",\r\n        type:\"number\",\r\n        text:\"5\"\r\n    },\r\n    {\r\n        id:\"six\",\r\n        type:\"number\",\r\n        text:\"6\"\r\n    },\r\n    {\r\n        id:\"one\",\r\n        type:\"number\",\r\n        text:\"1\"\r\n    },\r\n    {\r\n        id:\"two\",\r\n        type:\"number\",\r\n        text:\"2\"\r\n    },\r\n    {\r\n        id:\"three\",\r\n        type:\"number\",\r\n        text:\"3\"\r\n    },\r\n    {\r\n        id:\"zero\",\r\n        type:\"number\",\r\n        text:\"0\"\r\n    },\r\n    {\r\n        id:\"subtract\",\r\n        type:\"operation\",\r\n        text:\"-\"\r\n    },\r\n    {\r\n        id:\"decimal\",\r\n        type:\"decimal\",\r\n        text:\".\"\r\n    },\r\n    {\r\n        id:\"add\",\r\n        type:\"operation\",\r\n        text:\"+\"\r\n    },\r\n    {\r\n        id:\"equals\",\r\n        type:\"operation equals\",\r\n        text:\"=\"\r\n    },\r\n];","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { pressDigit, pressDecimal } from '../actions';\r\nimport { isDigitAddable } from \"../utils\";\r\n\r\nconst DigitButton = (props) => {\r\n    const {id, type, text} = props;\r\n    const {pressDigit, pressDecimal} = props;\r\n    const {formula, result, evaluated} = props;\r\n\r\n    const handleButtonClick = (buttonType, buttonText) => {\r\n        switch(buttonType) {\r\n            case 'number':\r\n                handleDigit(buttonText);\r\n                break;\r\n            case 'decimal':\r\n                handleDecimal(buttonText);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleDigit = (buttonText) => {\r\n        let userInput = buttonText;\r\n        let newFormula = formula.concat(userInput);\r\n\r\n        if(evaluated) {\r\n            pressDigit({\r\n                formula: userInput !== \"0\" ? userInput : \"\",\r\n                result: userInput === \"0\" ? \"\" : userInput,\r\n                evaluated: false\r\n            });\r\n            return;\r\n        }\r\n\r\n        if(!isDigitAddable(userInput, result)) {\r\n            pressDigit({\r\n                result: result\r\n            });\r\n            return;\r\n        }\r\n\r\n        if( (/[*+\\-/]0$/).test(formula)) {\r\n            newFormula = formula.slice(0, -1) + userInput;\r\n        } else {\r\n            if(!(/[*+\\-/]/).test(result))\r\n            {\r\n                userInput = result + userInput;\r\n            }\r\n        }\r\n\r\n        pressDigit({\r\n            formula: newFormula,\r\n            result: userInput,\r\n            evaluated: false\r\n        });\r\n    }\r\n\r\n    const handleDecimal = (buttonText) => {\r\n        let userInput = buttonText;\r\n\r\n        if(evaluated === true) {\r\n            this.setState({\r\n                formula: \"0.\",\r\n                result: \"0.\",\r\n                evaluated: false\r\n            });\r\n        } else if(!result.includes(\".\")) {\r\n            let newFormula = \"\";\r\n            if((/[*+\\-/]$/).test(formula) || (result === \"\" && formula === \"\")) {\r\n                userInput = \"0.\";\r\n                newFormula = formula + \"0.\";\r\n            }else {\r\n                userInput = formula.match(/(\\d*)$/)[0] + \".\";\r\n                newFormula = formula + \".\";\r\n            }\r\n                    console.log(buttonText);\r\n            pressDecimal({\r\n                formula: newFormula,\r\n                result: userInput\r\n            });\r\n        }\r\n    }\r\n\r\n    return(\r\n        <button id={id} className={\"btn \" + type}\r\n            onClick={() => handleButtonClick(type, text)}\r\n        >{text}</button>\r\n    );\r\n}\r\n\r\nDigitButton.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    formula: PropTypes.string.isRequired,\r\n    evaluated: PropTypes.bool.isRequired,\r\n    result: PropTypes.string.isRequired,\r\n    pressDigit: PropTypes.func.isRequired,\r\n    pressDecimal: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    formula: state.formula,\r\n    result: state.result,\r\n    evaluated: state.evaluated\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    pressDigit: (obj) => dispatch(pressDigit(obj)),\r\n    pressDecimal: (obj) => dispatch(pressDecimal(obj))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DigitButton);\r\n","import { MAX_DIGITS } from \"../constants/calculatorData\"\r\n\r\nconst getLength = (item) => {\r\n    const re = /\\d/g;\r\n    return ((item || \"\").match(re) || []).length;\r\n}\r\n\r\nexport const isDigitAddable = (digit, output) => {\r\n    if((digit === \"0\" && output === \"\")) {\r\n        return false;\r\n    }\r\n    if(getLength(output) === MAX_DIGITS) {\r\n        return false;\r\n    }\r\n    return true;\r\n}","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { pressClear, pressOperation } from '../actions';\r\n\r\nconst OperationButton = (props) => {\r\n    const {id, type, text} = props;\r\n    const {pressClear, pressOperation} = props;\r\n    const {formula, result, evaluated, previousResult} = props;\r\n\r\n    const handleButtonClick = (buttonType, buttonText) => {\r\n        switch(buttonType) {\r\n            case 'operation':\r\n                handleOperation(buttonText);\r\n                break;\r\n            case 'clear-all':\r\n                handleAC(buttonText);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleAC = () => {\r\n        pressClear({\r\n            formula: \"\",\r\n            evaluated: false,\r\n            previousResult: \"\",\r\n            result: \"\"\r\n        });\r\n    }\r\n\r\n    const handleOperation = (buttonText) => {\r\n        let userInput = buttonText;\r\n        let newFormula = formula.concat(userInput);\r\n\r\n        if(evaluated) {\r\n            pressOperation({\r\n                formula: previousResult + userInput,\r\n                result: userInput,\r\n                evaluated: false\r\n            });\r\n            return;\r\n        }\r\n\r\n        if(result === \"\" && (/[*/+]/).test(userInput)) {\r\n            newFormula = \"0\" + userInput;\r\n        }\r\n\r\n        if(userInput === \"-\") {\r\n            newFormula = newFormula.replace(/-{2}|\\+-$/,userInput);\r\n        } else {\r\n            newFormula = newFormula.replace(/[*+\\-/]{2,}$/,userInput);\r\n        }\r\n\r\n        pressOperation({\r\n            formula: newFormula,\r\n            result: userInput\r\n        });\r\n    }\r\n\r\n    return(\r\n        <button id={id} className={\"btn \" + type}\r\n            onClick={() => handleButtonClick(type, text)}\r\n        >{text}</button>\r\n    );\r\n}\r\n\r\nOperationButton.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    formula: PropTypes.string.isRequired,\r\n    evaluated: PropTypes.bool.isRequired,\r\n    result: PropTypes.string.isRequired,\r\n    previousResult: PropTypes.string.isRequired,\r\n    pressClear: PropTypes.func.isRequired,\r\n    pressOperation: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    formula: state.formula,\r\n    result: state.result,\r\n    evaluated: state.evaluated,\r\n    previousResult: state.previousResult\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    pressClear: (obj) => dispatch(pressClear(obj)),\r\n    pressOperation: (obj) => dispatch(pressOperation(obj))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(OperationButton);\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport {evaluate} from \"mathjs\";\r\nimport { pressEquals } from '../actions';\r\n\r\nconst EqualsButton = (props) => {\r\n    const {id, type, text} = props;\r\n    const {pressEquals} = props;\r\n    const {formula, evaluated, history} = props;\r\n\r\n    const handleEquals = (buttonText) => {\r\n        if(evaluated === false && formula !== \"\") {\r\n            let expression = formula.replace((/[*+\\-/]*$/), \"\");\r\n            let result = evaluate(expression).toString();\r\n            let newFormula = expression.concat(\"=\" + result);\r\n            let historyItem = {\r\n                expression: newFormula,\r\n                result: result\r\n            };\r\n\r\n            pressEquals({\r\n                formula: newFormula,\r\n                result: result.toString(),\r\n                previousResult: result.toString(),\r\n                evaluated: true,\r\n                history: [historyItem, ...history]\r\n            });\r\n        }\r\n    }\r\n\r\n    return(\r\n        <button id={id} className={\"btn \" + type}\r\n            onClick={() => handleEquals(type, text)}\r\n        >{text}</button>\r\n    );\r\n}\r\n\r\nEqualsButton.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    formula: PropTypes.string.isRequired,\r\n    evaluated: PropTypes.bool.isRequired,\r\n    history: PropTypes.array.isRequired,\r\n    pressEquals: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    formula: state.formula,\r\n    evaluated: state.evaluated,\r\n    history: state.history,\r\n    previousResult: state.previousResult\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    pressEquals: (obj) => dispatch(pressEquals(obj))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(EqualsButton);\r\n","import React from \"react\";\r\nimport '../assets/css/components/Keypad.scss';\r\nimport { calculatorButtons } from \"../constants/calculatorData\";\r\nimport DigitButton from \"../containers/DigitButton\";\r\nimport OperationButton from \"../containers/OperationButton\";\r\nimport EqualsButton from \"../containers/EqualsButton\";\r\n\r\nconst Keypad = () => {\r\n    let buttons = calculatorButtons.map((item, idx) => {\r\n        let {id, type, text} = item;\r\n        let btn = ButtonModule(idx, id, type, text);\r\n        if (type === 'number' || type === 'decimal') {\r\n            return btn.digitButton();\r\n        } else if (type === 'operation' || type === 'clear-all') {\r\n            return btn.operationButton();\r\n        } else {\r\n            return btn.equalsButton();\r\n        }\r\n    });\r\n\r\n    return(\r\n        <div className=\"buttons\">\r\n            {buttons}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ButtonModule = (idx, id, type, text) => {\r\n    const digitButton = () => {\r\n        return <DigitButton key={\"btn-\"+idx} id={id} type={type} text={text} />\r\n    }\r\n    const operationButton = () => {\r\n        return <OperationButton key={\"btn-\"+idx} id={id} type={type} text={text} />\r\n    }\r\n\r\n    const equalsButton = () => {\r\n        return <EqualsButton key={\"btn-\"+idx} id={id} type={type} text={text} />\r\n    }\r\n    return {\r\n        digitButton: digitButton,\r\n        operationButton: operationButton,\r\n        equalsButton: equalsButton\r\n    };\r\n}\r\n\r\nexport default Keypad;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport History from \"../containers/History\";\r\nimport Keypad from \"../components/Keypad\";\r\n\r\nconst ControlsView = ({isHistoryView}) => {\r\n    return(\r\n        <React.Fragment>\r\n            {isHistoryView ? <History /> : <Keypad />}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nControlsView.propTypes = {\r\n    isHistoryView: PropTypes.bool.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isHistoryView: state.isHistoryView\r\n});\r\n\r\nexport default connect (\r\n    mapStateToProps\r\n)(ControlsView);\r\n","import React, { Component } from \"react\";\r\nimport '../assets/css/components/App.scss';\r\n\r\nimport Header from \"../containers/Header\";\r\nimport Display from \"./Display\";\r\nimport FormulaDisplay from \"../containers/FormulaDisplay\";\r\nimport OutputDisplay from \"../containers/OutputDisplay\";\r\nimport ControlsView from \"../containers/ControlsView\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return <CalculatorApp />;\r\n  }\r\n}\r\n\r\nclass CalculatorApp extends React.Component {\r\n    render() {\r\n        return (\r\n          <div id=\"calculator\">\r\n            <Header />\r\n            <Display>\r\n                <FormulaDisplay />\r\n                <OutputDisplay />\r\n            </Display>\r\n            <ControlsView />\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport App from './components/App';\nimport rootReducer from './reducers';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst initialState = {\n    formula: \"\",\n    evaluated: false,\n    previousResult: \"\",\n    result: \"\",\n    isHistoryView: false,\n    history: []\n};\n\nconst store = createStore(rootReducer, initialState);\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('app')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {\r\n  TOGGLE_HISTORY_VIEW, CLEAR_HISTORY,\r\n  SELECT_HISTORY_ITEM, PRESS_EQUALS,\r\n  PRESS_CLEAR, PRESS_DIGIT,\r\n  PRESS_DECIMAL, PRESS_OPERATION\r\n} from \"../constants/actionTypes.js\";\r\n\r\nexport default (state, action) => {\r\n  switch(action.type) {\r\n    case CLEAR_HISTORY:\r\n      return {...state, history: []};\r\n    case PRESS_DIGIT:\r\n      return {...state, ...action.obj};\r\n    case PRESS_CLEAR:\r\n      return {...state, ...action.obj};\r\n    case PRESS_OPERATION:\r\n      return {...state, ...action.obj};\r\n    case PRESS_DECIMAL:\r\n      return {...state, ...action.obj};\r\n    case PRESS_EQUALS:\r\n      return {...state, ...action.obj};\r\n    case TOGGLE_HISTORY_VIEW:\r\n      return {...state, isHistoryView: !state.isHistoryView};\r\n    case SELECT_HISTORY_ITEM:\r\n      return {...state, ...action.obj, isHistoryView: false, evaluated: true};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"],"sourceRoot":""}